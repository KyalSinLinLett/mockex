searchNodes=[{"doc":"Mockex is a lightweight mocking library for elixir. Create simple mocks for external/third-party calls or mock websocket servers with custom listeners and responses.","ref":"Mockex.html","title":"Mockex","type":"module"},{"doc":"Macro to add custom listeners for the mock websocket server incoming messages and define mock responses.","ref":"Mockex.html#add_listeners/1","title":"Mockex.add_listeners/1","type":"macro"},{"doc":"Push a message to the mock websocket server.","ref":"Mockex.html#push_to_ws/2","title":"Mockex.push_to_ws/2","type":"function"},{"doc":"Macro to setup several mocks before each test case.","ref":"Mockex.html#setup_mock/2","title":"Mockex.setup_mock/2","type":"macro"},{"doc":"Start a mock websocket server.","ref":"Mockex.html#start_mock_ws/1","title":"Mockex.start_mock_ws/1","type":"function"},{"doc":"Macro used to define a mock. Provide the Module, function to be mocked, and the expectation. Then, make function calls as you normally would. Examples test &quot;mock the String.at/2 function&quot; do use_mock String , at : fn _ , _ -&gt; &quot;mock response here&quot; end do assert String . at ( &quot;hello&quot; , 2 ) == &quot;mock response here&quot; end end","ref":"Mockex.html#use_mock/4","title":"Mockex.use_mock/4","type":"macro"},{"doc":"Macro used to define several mock modules before each test. Provide the Module, function to be mocked, and the expectation. Then, make function calls as you normally would. Examples test &quot;mock testing several modules and their functions&quot; do use_mocks ( [ { Map , [ ] , [ get : fn %{ } , &quot;key&quot; -&gt; &quot;value&quot; end ] } , { String , [ ] , [ reverse : fn _ -&gt; :reversed end , length : fn _ -&gt; :some_length end ] } ] ) do assert Map . get ( %{ } , &quot;key&quot; ) == &quot;value&quot; assert String . reverse ( 3 ) == :reversed assert String . length ( 3 ) == :some_length end end","ref":"Mockex.html#use_mocks/2","title":"Mockex.use_mocks/2","type":"macro"},{"doc":"Behaviour for implementing custom mock websocket server for testing purposed. Example # create a new file test/mock_ws.ex to define the Mock Websocket Server defmodule CustomMockWsServer do import Mockex @behaviour Mockex.MockWebsocketServerBehaviour @impl true def start_server do start_mock_ws ( fn -&gt; handle_incoming_messages ( ) end ) end @impl true def handle_incoming_messages do add_listeners do # sample custom incoming message and custom response # caller refers to the client&#39;s PID - sent with self() from client side { :hi_from_client , caller } -&gt; send ( caller , :hi_from_server ) { :hi_from_client2 , caller } -&gt; send ( caller , :hi_from_server2 ) { :hi_from_client3 , caller } -&gt; send ( caller , :hi_from_server3 ) # a more generic example { message , caller } -&gt; send ( caller , message ) default -&gt; IO . puts &quot;error&quot; end handle_incoming_messages ( ) # to keep listener open end end # in the test/test_helper.exs, add the following line at the top of the file Code . require_file ( &quot;test/mock_ws.ex&quot; ) # in the testsuite # start the server during each test case execution setup do { :ok , ws_pid } = CustomMockWsServer . start_server ( ) %{ ws_pid : ws_pid } end test &quot;test ws client push event to the CustomMockWsServer&quot; , %{ ws_pid : ws_pid } do use_mock SocketClient , push : fn message -&gt; push_to_ws ( ws_pid , { message , self ( ) } ) end do SocketClient . push ( :hi_from_client ) assert_receive :hi_from_server , 2000 # timeout is 2000ms end end #### OR #### # start the server for use throughout all testcases setup_all do { :ok , ws_pid } = CustomMockWsServer . start_server ( ) %{ ws_pid : ws_pid } end test &quot;test ws client push event to the CustomMockWsServer&quot; , %{ ws_pid : ws_pid } do use_mock SocketClient , push : fn message -&gt; push_to_ws ( ws_pid , { message , self ( ) } ) end do # push to server 1 SocketClient . push ( :hi_from_client ) assert_receive :hi_from_server , 2000 # timeout is 2000ms # push to server 2 SocketClient . push ( :hi_from_client2 ) assert_receive :hi_from_server2 , 2000 # timeout is 2000ms # push to server 3 SocketClient . push ( :hi_from_client3 ) assert_receive :hi_from_server3 , 2000 # timeout is 2000ms end end","ref":"Mockex.MockWebsocketServerBehaviour.html","title":"Mockex.MockWebsocketServerBehaviour","type":"behaviour"},{"doc":"","ref":"Mockex.MockWebsocketServerBehaviour.html#c:handle_incoming_messages/0","title":"Mockex.MockWebsocketServerBehaviour.handle_incoming_messages/0","type":"callback"},{"doc":"","ref":"Mockex.MockWebsocketServerBehaviour.html#c:start_server/0","title":"Mockex.MockWebsocketServerBehaviour.start_server/0","type":"callback"}]